SET AUTOCOMMIT  OFF;

MERGE INTO F_ECOM_FORECAST AS DST
USING (
    SELECT
        SEF.DATETIME_MSK,
        to_date(SEF.DATETIME_MSK, 'YYYY-MM-DD') AS DATE_ID,
        zeroifnull(LH.HOUR_ID) AS HOUR_ID,
        SEF.ECOM_GROSS_DEMAND_FORECAST,
        SEF.ECOM_SHOP_ID,
        1 AS SOURCE_CURRENCY_ID
    FROM STG_ECOM_FORECAST SEF
    LEFT JOIN LU_HOUR LH ON LH.HOUR_NO = hour(SEF.DATETIME_MSK)
    LEFT JOIN ECOM_FORECAST_DATA_TRAIN EFDT ON
        EFDT.HOUR_ID = zeroifnull(LH.HOUR_ID) AND
        EFDT.DATE_ID = to_date(SEF.DATETIME_MSK, 'YYYY-MM-DD') AND
        EFDT.ECOM_SHOP_ID = SEF.ECOM_SHOP_ID
) AS SRC ON
    SRC.DATE_ID = DST.DATE_ID AND
    SRC.HOUR_ID = DST.HOUR_ID AND
    SRC.ECOM_SHOP_ID = DST.ECOM_SHOP_ID
WHEN MATCHED THEN UPDATE SET
    DST.ECOM_GROSS_DEMAND_FORECAST_ORIGIN = SRC.ECOM_GROSS_DEMAND_FORECAST,
    DST.MODIFIED_AT = CONVERT_TZ(CAST(CURRENT_TIMESTAMP AS TIMESTAMP),'CET','Europe/Moscow'),
    DST.SOURCE_CURRENCY_ID = SRC.SOURCE_CURRENCY_ID
WHEN NOT MATCHED THEN INSERT (
    ECOM_SHOP_ID,
    DATE_ID,
    HOUR_ID,
    ECOM_GROSS_DEMAND_FORECAST,
    CREATED_AT,
    SOURCE_CURRENCY_ID
)
VALUES (
    SRC.ECOM_SHOP_ID,
    SRC.DATE_ID,
    SRC.HOUR_ID,
    SRC.ECOM_GROSS_DEMAND_FORECAST,
    CONVERT_TZ(CAST(CURRENT_TIMESTAMP AS TIMESTAMP),'CET','Europe/Moscow'),
    SRC.SOURCE_CURRENCY_ID
);

COMMIT;

--forecast adjustment
MERGE INTO F_ECOM_FORECAST AS DST
USING (
    WITH SRC_1 AS (
        WITH ECOM_SALES AS (
            SELECT
                DATE_ID,
                HOUR_ID,
                ECOM_SHOP_ID,
                GROSS_AMNT_ORIGINAL AS GROSS_AMNT
            FROM ECOM_FORECAST_DATA_TRAIN EFDT
        )
        SELECT
            F.DATE_ID,
            F.HOUR_ID,
            F.ECOM_SHOP_ID,
            abs(zeroifnull(F.ECOM_GROSS_DEMAND_FORECAST_ORIGIN)) AS ECOM_GROSS_DEMAND_FORECAST,
            zeroifnull(ES.GROSS_AMNT) AS GROSS_AMNT
        FROM F_ECOM_FORECAST F
        LEFT JOIN ECOM_SALES ES ON
            ES.ECOM_SHOP_ID = F.ECOM_SHOP_ID AND
            ES.DATE_ID = F.DATE_ID AND
            ES.HOUR_ID = F.HOUR_ID
        LEFT JOIN LU_ECOM_SHOP LES ON F.ECOM_SHOP_ID = LES.ECOM_SHOP_ID
    ),
    SRC_2 AS (
        SELECT
            SRC_1.*,
            sum(GROSS_AMNT) OVER(PARTITION BY ECOM_SHOP_ID, DATE_ID ORDER BY HOUR_ID) AS RUNNING_SUM_GD,
            sum(ECOM_GROSS_DEMAND_FORECAST) OVER(PARTITION BY ECOM_SHOP_ID, DATE_ID ORDER BY HOUR_ID) AS RUNNING_SUM_FCST,
             --,case when local.running_sum_fcst<>0 then local.running_sum_gd/local.running_sum_fcst  else 1 end as adj_1
            CASE WHEN (DATE_ID <= CAST(CONVERT_TZ(CURRENT_DATE,'CET','Europe/Moscow') AS DATE) AND
                       HOUR_ID <= hour(CONVERT_TZ(CAST(CURRENT_TIMESTAMP AS TIMESTAMP),'CET','Europe/Moscow')) - 2 AND
                       zeroifnull(GROSS_AMNT) <> 0)
                THEN CASE WHEN LOCAL.RUNNING_SUM_FCST <> 0
                    THEN LOCAL.RUNNING_SUM_GD / LOCAL.RUNNING_SUM_FCST
                    ELSE 1 END
                ELSE NULL
            END AS ADJ_1
        FROM SRC_1
    )
    SELECT
        DATE_ID,
        HOUR_ID,
        ECOM_SHOP_ID,
        GROSS_AMNT,
        ECOM_GROSS_DEMAND_FORECAST,
        FIRST_VALUE(ADJ_1) OVER(PARTITION BY ECOM_SHOP_ID, DATE_ID ORDER BY CASE WHEN ADJ_1 IS NULL THEN 0 ELSE 1 END DESC, HOUR_ID DESC) AS LAST_ADJ_1,
        --,LAG(adj_1, 1) OVER (PARTITION by ECOM_SHOP_ID,DATE_ID ORDER BY HOUR_ID) FCST_ADJ
        CASE WHEN HOUR_ID = 0
            THEN 1
            ELSE CASE WHEN LAG(ADJ_1, 1) OVER(PARTITION BY ECOM_SHOP_ID, DATE_ID ORDER BY HOUR_ID) IS NULL
                THEN LOCAL.LAST_ADJ_1
                ELSE LAG(ADJ_1, 1) OVER(PARTITION BY ECOM_SHOP_ID, DATE_ID ORDER BY HOUR_ID)
            END
        END AS FCST_ADJ,
        ECOM_GROSS_DEMAND_FORECAST*CASE WHEN LOCAL.FCST_ADJ IS NULL OR LOCAL.FCST_ADJ > 2 THEN 1 ELSE LOCAL.FCST_ADJ END AS ECOM_GROSS_DEMAND_FORECAST_FCST_ADJ,
               --till last whole hour get fact else get forecast
        CASE WHEN (DATE_ID <= CAST(CONVERT_TZ(CURRENT_DATE,'CET','Europe/Moscow') AS DATE) AND
                   HOUR_ID <= (hour(CONVERT_TZ(CAST(CURRENT_TIMESTAMP AS TIMESTAMP),'CET','Europe/Moscow')) - 2) AND
                   zeroifnull(GROSS_AMNT) <> 0)
            THEN GROSS_AMNT
            ELSE LOCAL.ECOM_GROSS_DEMAND_FORECAST_FCST_ADJ
        END AS GROSS_DEMAND_FORECAST_COMB
    FROM SRC_2
) SRC ON
    SRC.DATE_ID = DST.DATE_ID AND
    SRC.HOUR_ID = DST.HOUR_ID AND
    SRC.ECOM_SHOP_ID = DST.ECOM_SHOP_ID
WHEN MATCHED THEN UPDATE SET
    DST.GROSS_AMNT = SRC.GROSS_AMNT,
    DST.ECOM_GROSS_DEMAND_FORECAST = SRC.ECOM_GROSS_DEMAND_FORECAST_FCST_ADJ,
    DST.GROSS_DEMAND_FORECAST_COMB = SRC.GROSS_DEMAND_FORECAST_COMB,
    DST.FORECAST_ADJ = SRC.FCST_ADJ,
    DST.MODIFIED_AT = CONVERT_TZ(CAST(CURRENT_TIMESTAMP AS TIMESTAMP),'CET','Europe/Moscow');

COMMIT;
SET AUTOCOMMIT OFF;
